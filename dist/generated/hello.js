/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: hello.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export var helloworld;
(function (helloworld) {
    class HelloRequest extends pb_1.Message {
        #one_of_decls = [];
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new HelloRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelloRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return HelloRequest.deserialize(bytes);
        }
    }
    helloworld.HelloRequest = HelloRequest;
    class HelloReply extends pb_1.Message {
        #one_of_decls = [];
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set message(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new HelloReply({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelloReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return HelloReply.deserialize(bytes);
        }
    }
    helloworld.HelloReply = HelloReply;
    class UnimplementedGreeterService {
        static definition = {
            SayHello: {
                path: "/helloworld.Greeter/SayHello",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes) => HelloRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes) => HelloReply.deserialize(new Uint8Array(bytes))
            },
            SayHelloStreamReply: {
                path: "/helloworld.Greeter/SayHelloStreamReply",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes) => HelloRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes) => HelloReply.deserialize(new Uint8Array(bytes))
            }
        };
    }
    helloworld.UnimplementedGreeterService = UnimplementedGreeterService;
    class GreeterClient extends grpc_1.makeGenericClientConstructor(UnimplementedGreeterService.definition, "Greeter", {}) {
        constructor(address, credentials, options) {
            super(address, credentials, options);
        }
        SayHello = (message, metadata, options, callback) => {
            return super.SayHello(message, metadata, options, callback);
        };
        SayHelloStreamReply = (message, metadata, options) => {
            return super.SayHelloStreamReply(message, metadata, options);
        };
    }
    helloworld.GreeterClient = GreeterClient;
})(helloworld || (helloworld = {}));
